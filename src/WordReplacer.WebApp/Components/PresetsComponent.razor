@using System.Text.Json
@inject IMatDialogService MatDialogService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IMatToaster Toaster
@inject IStringLocalizer<PresetsResource> Localizer

<MatButton 
    OnClick="@(() => { _savePresetDialogIsOpen = true; _presetSaveName = string.Empty; })" 
    Raised="false">
        @Localizer["btnSavePreset"]
</MatButton>

@if (_documentsPresetList.Count > 0)
{
    <MatButton 
        Class="ms-1" 
        OnClick="@(() => { _loadPresetDialogIsOpen = true; _selectedPresetToLoad = string.Empty; })" 
        Raised="false">
            @Localizer["btnLoadPreset"]
    </MatButton>

    <MatButton 
        Class="ms-1" 
        OnClick="@(() => { _deletePresetDialogIsOpen = true; _selectedPresetToDelete = null; })" 
        Raised="false">
            @Localizer["btnDeletePreset"]
    </MatButton>
}

<MatDialog @bind-IsOpen="@_savePresetDialogIsOpen">
    <MatDialogTitle>@Localizer["saveTitle"]</MatDialogTitle>
    <MatDialogContent>
        <MatTextField @bind-Value="@_presetSaveName" Label="@Localizer["savePresetNameLabel"]"></MatTextField>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton Class="me-1" Raised="true" OnClick="SaveLocalStorageAsync">
            @Localizer["save"]
        </MatButton>
        <MatButton OnClick="@(() => _savePresetDialogIsOpen = false)">
            @Localizer["close"]
        </MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@_loadPresetDialogIsOpen">
    <MatDialogTitle>@Localizer["loadTitle"]</MatDialogTitle>
    <MatDialogContent>
        @if (_documentsPresetList.Count > 0)
        {
            <MatSelectValue @bind-Value="@_selectedPresetToLoad" Items="@_documentsPresetList" ValueSelector=@(i=>i.ToString())></MatSelectValue>
        }
    </MatDialogContent>
    <MatDialogActions>
        <MatButton Class="me-1" Raised="true" OnClick="ReadLocalStorageAsync">
            @Localizer["load"]
        </MatButton>
        <MatButton OnClick="@(() => _loadPresetDialogIsOpen = false)">
            @Localizer["close"]
        </MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@_deletePresetDialogIsOpen">
    <MatDialogTitle>@Localizer["deleteTitle"]</MatDialogTitle>
    <MatDialogContent>
        <MatSelectItem @bind-Value="@_selectedPresetToDelete" Items="@_documentsPresetList"></MatSelectItem>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton Class="me-1" OnClick="DeleteAllLocalStorageAsync">@Localizer["btnDeleteAll"]</MatButton>
        <MatButton Class="me-1" OnClick="DeleteLocalStorageAsync">
            @Localizer["delete"]
        </MatButton>
        <MatButton Raised="true" OnClick="@(() => _deletePresetDialogIsOpen = false)">
            @Localizer["close"]
        </MatButton>
    </MatDialogActions>
</MatDialog>

@code {

    [Parameter]
    public Document Document { get; set; } = new();

    [Parameter]
    public EventCallback<Document> DocumentChanged { get; set; }

    private bool _loadPresetDialogIsOpen;

    private bool _savePresetDialogIsOpen;

    private bool _deletePresetDialogIsOpen;

    private List<string> _documentsPresetList = new();

    private const string DocumentsSavesKey = "documents_saves";

    private string _selectedPresetToLoad = string.Empty;

    private string? _selectedPresetToDelete = string.Empty;

    private string _presetSaveName = string.Empty;

    private async Task SaveLocalStorageAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(_presetSaveName))
            {
                Toaster.Add(Localizer["toasterEmptyPresetName"], MatToastType.Danger);
                return;
            }


            if (Document.DocumentValues.Count == 0)
            {
                Toaster.Add(Localizer["toasterValuesListEmpty"], MatToastType.Danger);
                return;
            }

            if (_documentsPresetList.Contains(_presetSaveName) || await LocalStorage.ContainKeyAsync(_presetSaveName))
            {
                var shouldReplace = await MatDialogService.ConfirmAsync(string.Format(Localizer["saveOverrideConfirmation"], _presetSaveName));
                if (!shouldReplace)
                {
                    return;
                }
            }

            // If it doesn't have in the local list, than add it. Otherwise, ignore because it will just replace it in Local Storage.
            if (!_documentsPresetList.Contains(_presetSaveName))
            {
                _documentsPresetList.Add(_presetSaveName);
            }

            var documentValuesKeysListSerialized = JsonSerializer.Serialize(_documentsPresetList);
            await LocalStorage.SetItemAsync(DocumentsSavesKey, documentValuesKeysListSerialized);

            var newDocumentsValuesSerialized = JsonSerializer.Serialize(Document.DocumentValues);
            await LocalStorage.SetItemAsync(_presetSaveName, newDocumentsValuesSerialized);
            Toaster.Add(string.Format(Localizer["toasterSuccessSave"], _presetSaveName), MatToastType.Success);
        }
        catch
        {
            Toaster.Add($"Error while saving the preset {_presetSaveName}", MatToastType.Danger);
        }
        finally
        {
            _presetSaveName = string.Empty;
            await DocumentHasChanged();
            CloseAllDialogs();
        }
    }

    private async Task ReadLocalStorageAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(_selectedPresetToLoad))
            {
                Toaster.Add(Localizer["toasterErrorSelectPresetFirst"], MatToastType.Danger);
                return;
            }

            if (Document.DocumentValues.Count > 0)
            {
                var shouldContinueLoading = await MatDialogService.ConfirmAsync(@Localizer["loadLoseCurrentValuesPrompt"]);
                if (!shouldContinueLoading)
                {
                    return;
                }
            }

            var documentValues = await LocalStorage.GetItemAsync<string>(_selectedPresetToLoad);
            if(documentValues is null)
            {
                Toaster.Add(string.Format(Localizer["toasterCorruptedPresetError"], _selectedPresetToLoad), MatToastType.Danger);
                return;
            }

            var result = JsonSerializer.Deserialize<List<KeyValuePair<DocumentValue, DocumentValue>>>(documentValues);
            Document.DocumentValues = result ?? new();
            Toaster.Add(string.Format(Localizer["toasterSuccessLoadPreset"], _selectedPresetToLoad), MatToastType.Success);
            CloseAllDialogs();
        }
        catch
        {
            Toaster.Add(string.Format(Localizer["toasterErrorLoadingPreset"], _selectedPresetToLoad), MatToastType.Danger);
        }
        finally
        {
            _selectedPresetToLoad = string.Empty;
            _selectedPresetToDelete = string.Empty;
            await DocumentHasChanged();
        }
    }

    private async Task DeleteLocalStorageAsync()
    {
        try
        {

            if (_documentsPresetList.Count == 0)
            {
                Toaster.Add(Localizer["toasterNoPresetToDelete"], MatToastType.Danger);
                return;
            }

            if (string.IsNullOrEmpty(_selectedPresetToDelete))
            {
                Toaster.Add(Localizer["toasterErrorNoPresetSelectedToDelete"], MatToastType.Danger);
                return;
            }

            var shouldDelete = await MatDialogService.ConfirmAsync(string.Format(Localizer["deleteConfirmationPrompt"], _selectedPresetToDelete));
            if (!shouldDelete)
            {
                return;
            }

            _documentsPresetList.Remove(_selectedPresetToDelete);
            await LocalStorage.RemoveItemAsync(_selectedPresetToDelete);
            Toaster.Add(string.Format(Localizer["toasterSuccessfullyDeleted"], _selectedPresetToDelete), MatToastType.Success);
        }
        catch
        {
            Toaster.Add(string.Format(Localizer["toasterErrorDeletePreset"], _selectedPresetToDelete), MatToastType.Danger);
        }
        finally
        {
            CloseAllDialogs();
            StateHasChanged();
        }
    }

    private async Task DeleteAllLocalStorageAsync()
    {
        try
        {
            var shouldDelete = await MatDialogService.ConfirmAsync(Localizer["deleteAllPrompt"]);
            if (!shouldDelete)
            {
                return;
            }

            await LocalStorage.ClearAsync();
            _documentsPresetList = new();
            Toaster.Add(Localizer["toasterAllPresetsDeleted"], MatToastType.Success);
        }
        catch
        {
            Toaster.Add(Localizer["toasterErrorDeleteAllPresets"], MatToastType.Danger);
        }
        finally
        {
            CloseAllDialogs();
            StateHasChanged();
        }
    }

    private void CloseAllDialogs()
    {
        _loadPresetDialogIsOpen = false;
        _savePresetDialogIsOpen = false;
        _deletePresetDialogIsOpen = false;
    }

    private async Task DocumentHasChanged()
    {
        await DocumentChanged.InvokeAsync(Document);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var documentsKeysStringList = await LocalStorage.GetItemAsync<string>(DocumentsSavesKey);
            if (string.IsNullOrEmpty(documentsKeysStringList))
            {
                _documentsPresetList = new List<string>(); 
                return;
            }

            _documentsPresetList = JsonSerializer.Deserialize<List<string>>(documentsKeysStringList) ?? new List<string>();
        }
        catch
        {
            Toaster.Add(Localizer["toasterErrorLoadingPresets"], MatToastType.Danger);
        }
        finally
        {
            await base.OnInitializedAsync();
        }
    }

}
