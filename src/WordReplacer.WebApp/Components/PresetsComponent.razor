@using System.Text.Json
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ISnackbar Snackbar
@inject IStringLocalizer<PresetsResource> Localizer

<MudButton OnClick="@(() => { _savePresetDialogIsOpen = true; _presetSaveName = string.Empty; })" Variant="Variant.Text">
    @Localizer["btnSavePreset"]
</MudButton>

@if (_documentsPresetList.Count > 0)
{
    <MudButton Class="ms-1" OnClick="@(() => { _loadPresetDialogIsOpen = true; _selectedPresetToLoad = string.Empty; })" Variant="Variant.Text">
        @Localizer["btnLoadPreset"]
    </MudButton>

    <MudButton Class="ms-1" OnClick="@(() => { _deletePresetDialogIsOpen = true; _selectedPresetToDelete = null; })" Variant="Variant.Text">
        @Localizer["btnDeletePreset"]
    </MudButton>
}

<MudDialog @bind-IsOpen="@_savePresetDialogIsOpen">
    <MudDialogTitle>@Localizer["saveTitle"]</MudDialogTitle>
    <MudDialogContent>
        <MudTextField @bind-Value="@_presetSaveName" Label="@Localizer["savePresetNameLabel"]" />
    </MudDialogContent>
    <MudDialogActions>
        <MudButton Class="me-1" Variant="Variant.Filled" OnClick="SaveLocalStorageAsync">
            @Localizer["save"]
        </MudButton>
        <MudButton OnClick="@(() => _savePresetDialogIsOpen = false)">
            @Localizer["close"]
        </MudButton>
    </MudDialogActions>
</MudDialog>

<MudDialog @bind-IsOpen="@_loadPresetDialogIsOpen">
    <MudDialogTitle>@Localizer["loadTitle"]</MudDialogTitle>
    <MudDialogContent>
        @if (_documentsPresetList.Count > 0)
        {
            <MudSelect T="string" @bind-Value="@_selectedPresetToLoad" Label="@Localizer["loadPresetLabel"]">
                @foreach (var item in _documentsPresetList)
                {
                    <MudSelectItem T="string" Value="@item">@item</MudSelectItem>
                }
            </MudSelect>
        }
    </MudDialogContent>
    <MudDialogActions>
        <MudButton Class="me-1" Variant="Variant.Filled" OnClick="ReadLocalStorageAsync">
            @Localizer["load"]
        </MudButton>
        <MudButton OnClick="@(() => _loadPresetDialogIsOpen = false)">
            @Localizer["close"]
        </MudButton>
    </MudDialogActions>
</MudDialog>

<MudDialog @bind-IsOpen="@_deletePresetDialogIsOpen">
    <MudDialogTitle>@Localizer["deleteTitle"]</MudDialogTitle>
    <MudDialogContent>
        <MudSelect T="string" @bind-Value="@_selectedPresetToDelete" Label="@Localizer["deletePresetLabel"]">
            @foreach (var item in _documentsPresetList)
            {
                <MudSelectItem T="string" Value="@item">@item</MudSelectItem>
            }
        </MudSelect>
    </MudDialogContent>
    <MudDialogActions>
        <MudButton Class="me-1" OnClick="DeleteAllLocalStorageAsync">@Localizer["btnDeleteAll"]</MudButton>
        <MudButton Class="me-1" OnClick="DeleteLocalStorageAsync">
            @Localizer["delete"]
        </MudButton>
        <MudButton Variant="Variant.Filled" OnClick="@(() => _deletePresetDialogIsOpen = false)">
            @Localizer["close"]
        </MudButton>
    </MudDialogActions>
</MudDialog>

@code {

    [Parameter]
    public Document Document { get; set; } = new();

    [Parameter]
    public EventCallback<Document> DocumentChanged { get; set; }

    private bool _loadPresetDialogIsOpen;

    private bool _savePresetDialogIsOpen;

    private bool _deletePresetDialogIsOpen;

    private List<string> _documentsPresetList = new();

    private const string DocumentsSavesKey = "documents_saves";

    private string _selectedPresetToLoad = string.Empty;

    private string? _selectedPresetToDelete = string.Empty;

    private string _presetSaveName = string.Empty;

    private async Task SaveLocalStorageAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(_presetSaveName))
            {
                Snackbar.Add(Localizer["toasterEmptyPresetName"], Severity.Error);
                return;
            }

            if (Document.DocumentValues.Count == 0)
            {
                Snackbar.Add(Localizer["toasterValuesListEmpty"], Severity.Error);
                return;
            }

            if (_documentsPresetList.Contains(_presetSaveName) || await LocalStorage.ContainKeyAsync(_presetSaveName))
            {
                var shouldReplace = await DialogService.ShowMessageBox(
                    Localizer["saveOverrideConfirmation"].Value,
                    Localizer["saveOverrideConfirmation"].Value,
                    yesText: Localizer["yes"].Value,
                    cancelText: Localizer["no"].Value);
                if (!shouldReplace ?? false)
                {
                    return;
                }
            }

            // If it doesn't have in the local list, than add it. Otherwise, ignore because it will just replace it in Local Storage.
            if (!_documentsPresetList.Contains(_presetSaveName))
            {
                _documentsPresetList.Add(_presetSaveName);
            }

            var documentValuesKeysListSerialized = JsonSerializer.Serialize(_documentsPresetList);
            await LocalStorage.SetItemAsync(DocumentsSavesKey, documentValuesKeysListSerialized);

            var newDocumentsValuesSerialized = JsonSerializer.Serialize(Document.DocumentValues);
            await LocalStorage.SetItemAsync(_presetSaveName, newDocumentsValuesSerialized);
            Snackbar.Add(string.Format(Localizer["toasterSuccessSave"], _presetSaveName), Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{Localizer["toasterError"]}: {ex.Message}", Severity.Error);
        }
        finally
        {
            _presetSaveName = string.Empty;
            await DocumentHasChanged();
            CloseAllDialogs();
        }
    }

    private async Task ReadLocalStorageAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(_selectedPresetToLoad))
            {
                Snackbar.Add(Localizer["toasterErrorSelectPresetFirst"], Severity.Error);
                return;
            }

            if (Document.DocumentValues.Count > 0)
            {
                var shouldContinueLoading = await DialogService.ShowMessageBox(
                    Localizer["loadLoseCurrentValuesPrompt"].Value,
                    Localizer["loadLoseCurrentValuesPrompt"].Value,
                    yesText: Localizer["yes"].Value,
                    cancelText: Localizer["no"].Value);
                if (!shouldContinueLoading ?? false)
                {
                    return;
                }
            }

            var documentValues = await LocalStorage.GetItemAsync<string>(_selectedPresetToLoad);
            if (documentValues is null)
            {
                Snackbar.Add(string.Format(Localizer["toasterCorruptedPresetError"], _selectedPresetToLoad), Severity.Error);
                return;
            }

            var result = JsonSerializer.Deserialize<List<KeyValuePair<DocumentValue, DocumentValue>>>(documentValues);
            Document.DocumentValues = result ?? new();
            Snackbar.Add(string.Format(Localizer["toasterSuccessLoadPreset"], _selectedPresetToLoad), Severity.Success);
            CloseAllDialogs();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{Localizer["toasterErrorLoadingPreset"]}: {ex.Message}", Severity.Error);
        }
        finally
        {
            _selectedPresetToLoad = string.Empty;
            _selectedPresetToDelete = string.Empty;
            await DocumentHasChanged();
        }
    }

    private async Task DeleteLocalStorageAsync()
    {
        try
        {

            if (_documentsPresetList.Count == 0)
            {
                Snackbar.Add(Localizer["toasterNoPresetToDelete"], Severity.Error);
                return;
            }

            if (string.IsNullOrEmpty(_selectedPresetToDelete))
            {
                Snackbar.Add(Localizer["toasterErrorNoPresetSelectedToDelete"], Severity.Error);
                return;
            }

            var shouldDelete = await DialogService.ShowMessageBox(
                Localizer["deleteConfirmationPrompt"].Value,
                Localizer["deleteConfirmationPrompt"].Value,
                yesText: Localizer["yes"].Value,
                cancelText: Localizer["no"].Value);
            if (!shouldDelete ?? false)
            {
                return;
            }

            _documentsPresetList.Remove(_selectedPresetToDelete);
            await LocalStorage.RemoveItemAsync(_selectedPresetToDelete);
            Snackbar.Add(string.Format(Localizer["toasterSuccessfullyDeleted"], _selectedPresetToDelete), Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{Localizer["toasterErrorDeletePreset"]}: {ex.Message}", Severity.Error);
        }
        finally
        {
            CloseAllDialogs();
            StateHasChanged();
        }
    }

    private async Task DeleteAllLocalStorageAsync()
    {
        try
        {
            var shouldDelete = await DialogService.ShowMessageBox(
                Localizer["deleteAllPrompt"].Value,
                Localizer["deleteAllPrompt"].Value,
                yesText: Localizer["yes"].Value,
                cancelText: Localizer["no"].Value);
            if (!shouldDelete ?? false)
            {
                return;
            }

            await LocalStorage.ClearAsync();
            _documentsPresetList = new();
            Snackbar.Add(Localizer["toasterAllPresetsDeleted"], Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{Localizer["toasterErrorDeleteAllPresets"]}: {ex.Message}", Severity.Error);
        }
        finally
        {
            CloseAllDialogs();
            StateHasChanged();
        }
    }

    private void CloseAllDialogs()
    {
        _loadPresetDialogIsOpen = false;
        _savePresetDialogIsOpen = false;
        _deletePresetDialogIsOpen = false;
    }

    private async Task DocumentHasChanged()
    {
        await DocumentChanged.InvokeAsync(Document);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var documentsKeysStringList = await LocalStorage.GetItemAsync<string>(DocumentsSavesKey);
            if (string.IsNullOrEmpty(documentsKeysStringList))
            {
                _documentsPresetList = new List<string>();
                return;
            }

            _documentsPresetList = JsonSerializer.Deserialize<List<string>>(documentsKeysStringList) ?? new List<string>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{Localizer["toasterErrorLoadingPresets"]}: {ex.Message}", Severity.Error);
        }
        finally
        {
            await base.OnInitializedAsync();
        }
    }

}
