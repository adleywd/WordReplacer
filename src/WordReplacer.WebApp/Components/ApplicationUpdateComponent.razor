@inject IJSRuntime JsRuntime
@inject IStringLocalizer<ApplicationUpdateResource> Localizer
@inject NavigationManager Navigation
@implements IDisposable

@if (_showUpdateNotification)
{
    <MudPaper Class="text-center">
        <div class="container-fluid">
            <div class="row pt-1 pb-1">
                <div class="col-11">
                    <label>@Localizer["messageUpdateReady"]</label>
                    <MudButton OnClick="ReloadPage" StartIcon="@Icons.Material.Filled.Update">
                        @Localizer["btnReload"]
                    </MudButton>
                </div>
                <div class="col-1">
                    <MudButton Class="float-end" OnClick="@(() => _showUpdateNotification = false)">
                        ðŸ—™
                    </MudButton>
                </div>
            </div>
        </div>
    </MudPaper>
}

@code {
    private bool _showUpdateNotification = false;

    private DotNetObjectReference<ApplicationUpdateComponent>? _objRef;

    protected override async Task OnInitializedAsync()
    {
        _objRef = DotNetObjectReference.Create(this);

        await RegisterForUpdateAvailableNotification();
    }

    private async Task RegisterForUpdateAvailableNotification()
    {
        // Initialize the service-worker
        await JsRuntime.InvokeVoidAsync(
            "registerForUpdateAvailableNotification",
            _objRef,
            nameof(OnUpdateReadyNotify));
    }

    private void ReloadPage()
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }

    [JSInvokable(nameof(OnUpdateReadyNotify))]
    public Task OnUpdateReadyNotify()
    {
        _showUpdateNotification = true;

        StateHasChanged();

        return Task.CompletedTask;
    }

    public void Dispose()
    {
        _objRef?.Dispose();
    }
}