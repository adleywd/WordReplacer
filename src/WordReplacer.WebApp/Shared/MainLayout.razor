@inherits LayoutComponentBase
@using System.Globalization
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject AppSettings AppSettings

<MudThemeProvider @ref="_mudThemeProvider" Theme="_wordReplacerTheme" @bind-IsDarkMode="_isDarkMode"/>
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudIcon><img style="width: 100%;" src="img/wr-logo-white-nobg-64x64.png" alt="Word Replacer Logo" /></MudIcon>
        <MudText Typo="Typo.h6" Class="ml-3">Word Replacer</MudText>
        <MudSpacer />
        @if (_selectedLanguage != "pt")
        {
            <MudIconButton HtmlTag="img"  OnClick="@(() => ChangeUIToLanguageAsync("pt"))"  Edge="Edge.End">
                <img src="img/flag-brazil.svg" alt="brazil flag"/>
            </MudIconButton>
        }
        @if (_selectedLanguage != "en")
        {
            <MudIconButton HtmlTag="img"  OnClick="@(() => ChangeUIToLanguageAsync("en"))"  Edge="Edge.End">
                <img class="text-centered-in-btn" src="img/flag-united-states.svg" alt="united states flag"/>
            </MudIconButton>
        }
        
        <MudIconButton Href="https://github.com/adleywd/WordReplacer" Icon="@Icons.Custom.Brands.GitHub" Title="GitHub" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen">
        <NavMenuContent/>
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Medium">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>



@code
{
    private bool _isDarkMode;
    private MudThemeProvider? _mudThemeProvider;

    private string _selectedLanguage = "en";

    private bool _drawerOpen = false;
    
    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private readonly MudTheme _wordReplacerTheme = new()
    {
        PaletteLight = new PaletteLight()
        {
            Primary = Colors.Blue.Default,
            Secondary = Colors.Green.Accent4,
            AppbarBackground = Colors.Red.Default,
        },
        PaletteDark = new PaletteDark()
        {
            Primary = Colors.Blue.Lighten1
        },

        LayoutProperties = new LayoutProperties()
        {
            DrawerWidthLeft = "260px",
            DrawerWidthRight = "300px"
        }
    };
    
    private async Task ChangeUIToLanguageAsync(string language)
    {
        _selectedLanguage = language;
        var newCulture = new CultureInfo(language);
        Thread.CurrentThread.CurrentCulture = newCulture;
        Thread.CurrentThread.CurrentUICulture = newCulture;
        CultureInfo.DefaultThreadCurrentCulture = newCulture;
        CultureInfo.DefaultThreadCurrentUICulture = newCulture;
        await LocalStorage.SetItemAsStringAsync(AppSettings.LanguageStoreKey, language);
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }

    protected override async Task OnInitializedAsync()
    {
        _selectedLanguage = CultureInfo.CurrentCulture.TwoLetterISOLanguageName;

        if (await LocalStorage.ContainKeyAsync(AppSettings.LanguageStoreKey))
        {
            _selectedLanguage = await LocalStorage
                .GetItemAsStringAsync(AppSettings.LanguageStoreKey)
                .ConfigureAwait(true) ?? "en";
        }
        else if ((_selectedLanguage != "pt" && _selectedLanguage != "en"))
        {
            _selectedLanguage = "en";
        }

        await base.OnInitializedAsync();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ArgumentNullException.ThrowIfNull(_mudThemeProvider);
            await _mudThemeProvider.WatchSystemDarkModeAsync(OnSystemDarkModeChanged);
            StateHasChanged();
        }
    }

    private Task OnSystemDarkModeChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }
}