@page "/"
@using WordReplacer.Common
@using WordReplacer.Dto
@using WordReplacer.Enums
@using WordReplacer.Models
@using WordReplacer.Models.Enums
@inject IStringLocalizer<GeneralResource> Localizer
@inject IMatToaster Toaster
@inject IDocumentService DocumentService
@inject IJSRuntime JsRuntime

<PageTitle>Word Replacer</PageTitle>
<hr />
<DownloadPopoutComponent @ref="_popupRef" HeaderText="@Localizer["downloadsHeaderText"]">
    <Content>
        <DownloadDocumentListComponent @bind-DownloadsDict="_downloads" />
    </Content>
</DownloadPopoutComponent>

<div class="container-fluid">
    <MatPaper Elevation="6" Class="p-3" Rounded="true">
        <div class="d-inline-block">
            <MatTooltip Tooltip="@Localizer["presetToolTip"]"
                TargetId="preset-text-id"
                Position="MatTooltipPosition.Right">
                    <i id="preset-text-id" class="fa fa-info-circle primary-color"></i>
                    <span class="preset-text">@Localizer["presetLabel"]</span>
            </MatTooltip>
            <PresetsComponent @bind-Document="_doc" />
        </div>
    </MatPaper>

    <hr />
    <MatPaper Elevation="6" Class="p-3" Rounded="true">
        <div class="row">
            <div class="col-12 mt-3">
                <InputFileComponent @bind-Document="_doc" />
            </div>
        </div>
        <br />
        <EditForm Model="_docParamsDto" OnValidSubmit="AddValues">
            <div class="row">
                <div class="col-lg-6 col-md-6 col-sm-12 mt-2">
                    <MatTextField @bind-Value="_docParamsDto.Text"
                                  OnInput="@(e => _docParamsDto.Text = e.Value?.ToString())"
                                  HelperText="@Localizer["helperTextAddValues"]"
                                  Label="@Localizer["labelTextAddValues"]"
                                  FullWidth="true" />
                </div>
                <div class="col-lg-6 col-md-6 col-sm-12 mt-2">
                    <label class="text-wrap text-break">
                        @(_docParamsDto.Type == InputType.Text ?
                            string.Format(Localizer["inputTypeTextLabel"], _docParamsDto.Text.SetDefaultIfNullOrEmpty(Localizer["thisWordDefaultValue"])) :
                            string.Format(Localizer["inputTypeListLabel"], _docParamsDto.Text.SetDefaultIfNullOrEmpty(Localizer["thisWordDefaultValue"])))
                    </label>
                    <br />
                    <MatRadioGroup @bind-Value="@_docParamsDto.Type" TValue="InputType">
                        <MatRadioButton Value="@InputType.Text" TValue="InputType">@Localizer["inputTypeText"]</MatRadioButton>
                        <MatRadioButton Value="@InputType.List" TValue="InputType">@Localizer["inputTypeList"]</MatRadioButton>
                    </MatRadioGroup>
                </div>
            </div>
            <div class="row">
                <div class="col-12 mb-2 justify-content-center text-center">
                    <MatButton Icon="@MatIconNames.Add"
                               Style="width: 98%"
                               Raised="true"
                               Disabled="_docParamsDto.IsTextEmpty">
                        @Localizer["buttonTextAddValues"]
                    </MatButton>
                </div>
            </div>
        </EditForm>
    </MatPaper>
    <hr />

    @if (_doc.DocumentValues.Count > 0)
    {
        <div class="row">
            <MatHidden BreakPoint="@MatBreakpoint.SM" Direction="@MatHiddenDirection.Down">
                <div class="col-lg-5 col-md-5 col-sm-12 mt-2">
                    <h3>@Localizer["headerOriginalValues"]</h3>
                </div>
                <div class="col-lg-4 col-md-4 col-sm-12 mt-2">
                    <h3>@Localizer["headerNewValues"]</h3>
                </div>
            </MatHidden>

            <div class="col-lg-3 col-md-12 col-sm-12 mt-2">
                <MatButton Class="float-end"
                       Icon="@MatIconNames.Delete_forever"
                       Type="button"
                       OnClickStopPropagation="true"
                       OnClick="@(() => { _doc.DocumentValues = new (); })">
                    @Localizer["btnRemoveAll"]
                </MatButton>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-info justify-content-center">
            <p class="text-center justify-content-center">@Localizer["emptyValueListInfo"]</p>
        </div>
    }
    <EditForm Model="_doc" OnValidSubmit="HandleSubmitAsync" class="col-12">
        <DataAnnotationsValidator />

        <ValuesInputComponent @bind-Document="_doc" />
        <hr />
        @if (_doc.DocumentValues.Count > 0)
        {
            @if (_progressBar)
            {
                <MatProgressBar Class="mb-2" Indeterminate="false" Progress="_progressBarValue"></MatProgressBar>
            }
            <MatButton Icon="@_btnReplaceIcon" Disabled="@(!_doc.Files.Any() || _progressBar)" Raised="true">@_btnReplaceText</MatButton>
        }

    </EditForm>
    <SnackbarComponent @bind-IsSnackbarOpen="_snackBarIsOpen"
                       @bind-Timeout="_snackBarTimeout"
                       @bind-HasCloseButton="_snackBarHasCloseButton">
        <Content>
            @_snackBarContent
        </Content>
    </SnackbarComponent>
</div>

@code
{
    private Dictionary<string, Download> _downloads = new();

    private DownloadPopoutComponent? _popupRef = new();

    private Document _doc = new();
    private readonly DocumentParamsDto _docParamsDto = new();
    private readonly bool _isMultipleWordsAtOnce = true;

    // SnackBar configs
    private bool _snackBarIsOpen;
    private string _snackBarContent = string.Empty;
    private bool _snackBarHasCloseButton;
    private int _snackBarTimeout = 10000;

    // Progress bar configs
    private bool _progressBar;
    private double _progressBarValue;

    // Submit btn configs
    private string _btnReplaceText = string.Empty;
    private string _btnReplaceIcon = MatIconNames.Find_replace;

    private void OpenDownloadPopup()
    {
        _popupRef?.Show();
    }
    private void CloseDownloadPopup()
    {
        _popupRef?.Close();
    }



    private void AddValues()
    {

        if (_doc.DocumentValues.Select(d => d.Key.Text).Any(text => text == _docParamsDto.Text))
        {
            Toaster.Add(string.Format(Localizer["valueAlreadyAddedError"], _docParamsDto.Text), MatToastType.Danger, @Localizer["valueAlreadyAddedErrorTitle"]);
            return;
        }
        var oldValue = new DocumentValue()
            {
                Label = Localizer["originalDocumentLabel"],
                HtmlId = Guid.NewGuid().ToString(),
                IsOldValue = true,
                Text = _docParamsDto.Text,
                HelperText = Localizer["originalDocumentHelperText"],
                Type = InputType.Text,
                IsAccordionOpen = true
            };
        var newValue = new DocumentValue()
            {
                Label = string.Format(Localizer["newDocumentLabel"], _docParamsDto.Text),
                HtmlId = Guid.NewGuid().ToString(),
                IsOldValue = false,
                Text = string.Empty,
                HelperText = Localizer["newDocumentHelperText"],
                Type = _docParamsDto.Type,
                IsAccordionOpen = true,
                ShouldReplaceForEachLine = _docParamsDto.Type == InputType.List
            };
        _doc.DocumentValues.Add(new KeyValuePair<DocumentValue, DocumentValue>(oldValue, newValue));
        _docParamsDto.Text = string.Empty; // Cleat add values text
    }

    private async Task HandleSubmitAsync()
    {
        try
        {
            PrepareUIToReplaceAndDownload();

            // TODO: Validate textarea with empty values. It is not working.
            _doc.DocumentValues.SanitizeValues();

            var combinations = new List<Dictionary<string, string>>();

            var isThereAnyReplaceForMultipleLine = _doc.DocumentValues.Any(d => d.Value.ShouldReplaceForEachLine);

            if (isThereAnyReplaceForMultipleLine)
            {
                // Get all possible combinations
                combinations = DocumentService.GetAllCombinations(_doc.DocumentValues);
            }
            else
            {
                // Add the single combination to the combination list
                combinations.Add(_doc.DocumentValues
                                     .ToDictionary(
                                         d => d.Key.Text!,
                                         d => d.Value.Text!
                    ));
            }

            if(isThereAnyReplaceForMultipleLine && combinations.Count == 0)
            {
                Toaster.Add(Localizer["errorListEmptyToBeReplaced"], MatToastType.Danger);
                return;
            }

            PrepareDownloadUI(combinations, isThereAnyReplaceForMultipleLine, _doc.Files);

            await DelayDotNetToUpdateUIAsync();

            Toaster.Add(Localizer["InfoSiteFreezes"], MatToastType.Primary);

            var progressSizePerFile = 1.0 / (combinations.Count * _doc.Files.Count);

            OpenDownloadPopup();

            await DelayDotNetToUpdateUIAsync();

            foreach (var file in _doc.Files)
            {
                var originalFileInMemoryStream = await DocumentService.GetMemoryStream(file);
    
                foreach (Dictionary<string, string> combination in combinations)
                {
                    var fileName = GetFileName(isThereAnyReplaceForMultipleLine || _doc.Files.Count > 1, combination.Values, file.Name);
                    var currentDownloadFile = _downloads.FirstOrDefault(d => d.Value.FileName == fileName);
                    try
                    {
                        // Replace
                        Stream docReplaced = DocumentService.Replace(combination, originalFileInMemoryStream, _isMultipleWordsAtOnce);

                        // Download the file
                        await DocumentService
                            .DownloadFile(fileName, docReplaced, "application/vnd.openxmlformats-officedocument.wordprocessingml.document")
                            .ConfigureAwait(false);

                        // Dispose current replaced doc
                        await docReplaced.DisposeAsync();

                        if (currentDownloadFile.Value is not null)
                        {
                            currentDownloadFile.Value.Status = DownloadStatus.Success;
                        }
                    }
                    catch (Exception ex)
                    {
                        if (currentDownloadFile.Value is not null) 
                        {
                            currentDownloadFile.Value.Status = DownloadStatus.Error;
                        }
                        Console.WriteLine(ex.Message);
                        Toaster.Add(string.Format(Localizer["toasterFileError"], fileName), MatToastType.Danger);
                    }
                    finally
                    {
                        // Update progress UI
                        if (combination != combinations.Last() || file != _doc.Files.Last())
                        {
                            _progressBarValue += progressSizePerFile;
                            ReloadUI();
                            await DelayDotNetToUpdateUIAsync();
                        }
                    }
                }
                await originalFileInMemoryStream.DisposeAsync();
            }
            SetDefaultUIAfterDownload();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Toaster.Add(Localizer["toasterGenericError"], MatToastType.Danger);
            SetDefaultUIAfterError();
            ReloadUI();
        }
    }

    private void PrepareDownloadUI(List<Dictionary<string, string>> combinations, bool hasMultipleFiles, IReadOnlyList<IMatFileUploadEntry> docFiles)
    {
        foreach (var file in docFiles)
        {
            foreach (var combination in combinations)
            {
                var fileName = GetFileName(hasMultipleFiles || docFiles.Count > 1, combination.Values, file.Name);

                var download = new Download
                {
                    FileName = fileName,
                    Progress = 0.75,
                    Status = DownloadStatus.InProgress,
                    IsProgressIndeterminate = true
                };
                if (_downloads.ContainsKey(fileName))
                {
                    // update
                    _downloads[fileName] = download;
                }
                else
                {
                    // add
                    _downloads.Add(download.FileName, download);
                }
            }
        }
    }

    private string GetFileName(bool hasMultipleFiles, IEnumerable<string> combinationsValues, string inputFileName)
    {
        var fileName = inputFileName;

        if (hasMultipleFiles)
        {
            fileName = $"{GetFileNameWithoutExtension(fileName)}_{Helper.SanitizeFileName(string.Join("_", combinationsValues)) + ".docx"}";
        }

        return fileName;
    }
    
    private string GetFileNameWithoutExtension(string fileName)
    {
        return Path.GetFileNameWithoutExtension(fileName);
    }

    // Delay the to UI (Javascript) to catch a breath to update UI
    private static async Task DelayDotNetToUpdateUIAsync(int timeInMs = 100)
    {
        await Task.Delay(timeInMs);
    }

    private void PrepareUIToReplaceAndDownload()
    {
        _progressBar = true;
        _btnReplaceText = Localizer["btnReplaceTextReplacing"];
        _btnReplaceIcon = MatIconNames.Hourglass_empty;
    }

    private void SetDefaultUIAfterDownload()
    {
        _progressBar = false;
        _snackBarIsOpen = false;
        _progressBarValue = 0;
        SetDefaultValuesForBtnReplace();
    }

    private void SetDefaultUIAfterError()
    {
        _progressBar = false;
        SetDefaultValuesForBtnReplace();
    }

    private void SetDefaultValuesForBtnReplace()
    {
        _btnReplaceText = Localizer["btnReplaceTextDefault"];
        _btnReplaceIcon = MatIconNames.Find_replace;
    }

    private void DisplaySnackBar(string textMessage, bool hasCloseButton = true, int timeout = 100)
    {
        if (_snackBarIsOpen)
        {
            _snackBarIsOpen = false;
        }

        _snackBarIsOpen = true;
        _snackBarContent = textMessage;
        _snackBarHasCloseButton = hasCloseButton;
        _snackBarTimeout = timeout;
        ReloadUI();
    }

    private void ReloadUI()
    {
        InvokeAsync(StateHasChanged);
    }

    protected override Task OnInitializedAsync()
    {
        _btnReplaceText = Localizer["btnReplaceTextDefault"];

        return base.OnInitializedAsync();
    }

}