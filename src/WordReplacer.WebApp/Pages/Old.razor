@page "/old"
@using MudBlazor
@using WordReplacer.Common
@using WordReplacer.Dto
@using WordReplacer.Models.Enums
@using WordReplacer.WebApp.Pages.OldSections
@using WordReplacer.WebApp.Services
@using InputType = WordReplacer.Enums.InputType
@inject IStringLocalizer<GeneralResource> Localizer
@inject ISnackbar Snackbar
@inject IDocumentProcessingService DocumentProcessingService
@inject IJSRuntime JsRuntime

<PageTitle>Word Replacer</PageTitle>
<hr />
<DownloadPopoutComponent @ref="_popupRef" HeaderText="@Localizer["downloadsHeaderText"]">
    <Content>
        <DownloadDocumentListComponent @bind-DownloadsDict="_downloads" />
    </Content>
</DownloadPopoutComponent>

<div class="container-fluid">
    <MudPaper Elevation="6" Class="p-3" Rounded="true">
        <PresetsSection TooltipText="@Localizer["presetToolTip"]"
                        LabelText="@Localizer["presetLabel"]"
                        Document="_doc"
                        DocumentChanged="OnPresetDocumentChanged" />
    </MudPaper>

    <hr />
    <MudPaper Elevation="6" Class="p-3" Rounded="true">
        <InputSection Document="_doc"
                      DocParamsDto="_docParamsDto"
                      OnAddValues="AddValues"
                      HelperText="@Localizer["helperTextAddValues"]"
                      LabelText="@Localizer["labelTextAddValues"]"
                      InputTypeLabel="@(_docParamsDto.Type == InputType.Text ? string.Format(Localizer["inputTypeTextLabel"], _docParamsDto.Text.SetDefaultIfNullOrEmpty(Localizer["thisWordDefaultValue"])) : string.Format(Localizer["inputTypeListLabel"], _docParamsDto.Text.SetDefaultIfNullOrEmpty(Localizer["thisWordDefaultValue"])))"
                      InputTypeText="@Localizer["inputTypeText"]"
                      InputTypeList="@Localizer["inputTypeList"]"
                      AddButtonText="@Localizer["buttonTextAddValues"]"/>
    </MudPaper>
    <hr />

    @if (_doc.DocumentValues.Count > 0)
    {
        <div class="row">
            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <div class="col-lg-5 col-md-5 col-sm-12 mt-2">
                    <h3>@Localizer["headerOriginalValues"]</h3>
                </div>
                <div class="col-lg-4 col-md-4 col-sm-12 mt-2">
                    <h3>@Localizer["headerNewValues"]</h3>
                </div>
            </MudHidden>

            <div class="col-lg-3 col-md-12 col-sm-12 mt-2">
                <MudButton Class="float-end"
                       StartIcon="@Icons.Material.Filled.DeleteForever"
                       Type="button"
                       OnClick:stopPropagation="true"
                       OnClick="@(() => { _doc.DocumentValues = new (); })">
                    @Localizer["btnRemoveAll"]
                </MudButton>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-info justify-content-center">
            <p class="text-center justify-content-center">@Localizer["emptyValueListInfo"]</p>
        </div>
    }
    <EditForm Model="_doc" OnValidSubmit="HandleSubmitAsync" class="col-12">
        <DataAnnotationsValidator />

        <ValuesInputComponent @bind-Document="_doc" />
        <hr />
        @if (_doc.DocumentValues.Count > 0)
        {
            @if (_progressBar)
            {
                <MudProgressLinear Class="mb-2" Indeterminate="false" Value="@_progressBarValue"></MudProgressLinear>
            }
            <MudButton StartIcon="@_btnReplaceIcon" Disabled="@(!_doc.FilesBrowser.Any() || _progressBar)" Variant="Variant.Filled">@_btnReplaceText</MudButton>
        }

    </EditForm>
    <SnackbarComponent @bind-IsSnackbarOpen="_snackBarIsOpen"
                       @bind-Timeout="_snackBarTimeout"
                       @bind-HasCloseButton="_snackBarHasCloseButton">
        <Content>
            @_snackBarContent
        </Content>
    </SnackbarComponent>
</div>

@code
{
    private Dictionary<string, Download> _downloads = new();

    private DownloadPopoutComponent? _popupRef = new();

    private Document _doc = new();
    private readonly DocumentParamsDto _docParamsDto = new();

    // SnackBar configs
    private bool _snackBarIsOpen;
    private string _snackBarContent = string.Empty;
    private bool _snackBarHasCloseButton;
    private int _snackBarTimeout = 10000;

    // Progress bar configs
    private bool _progressBar;
    private double _progressBarValue;

    // Submit btn configs
    private string _btnReplaceText = string.Empty;
    private string _btnReplaceIcon = Icons.Material.Filled.FindReplace;

    private void OpenDownloadPopup()
    {
        _popupRef?.Show();
    }

    private void AddValues()
    {
        DocumentProcessingService.AddValues(_doc, _docParamsDto);
    }

    private async Task HandleSubmitAsync()
    {
        await DocumentProcessingService.HandleSubmitAsync(
            _doc,
            async () => PrepareUIToReplaceAndDownload(),
            async (combinations, hasMultipleFiles, docFiles) => PrepareDownloadUI(combinations, hasMultipleFiles, docFiles),
            async () => await DelayDotNetToUpdateUIAsync().ConfigureAwait(true),
            // (message, type) => Snackbar.Add(message, Severity.Normal),
            OpenDownloadPopup,
            async () => SetDefaultUIAfterDownload(),
            async () => SetDefaultUIAfterError(),
            (value) =>
            {
                _progressBarValue += value;
                ReloadUI();
            },
            (fileName) =>
            {
                if (_downloads.TryGetValue(fileName, out var download))
                {
                    download.Status = DownloadStatus.Success;
                    ReloadUI();
                }
            },
            (fileName) =>
            {
                if (_downloads.TryGetValue(fileName, out var download))
                {
                    download.Status = DownloadStatus.Error;
                    ReloadUI();
                }
            }
        ).ConfigureAwait(true);
    }

    private void PrepareDownloadUI(List<Dictionary<string, string>> combinations, bool hasMultipleFiles, IReadOnlyList<FileUploadDto> docFiles)
    {
        foreach (var file in docFiles)
        {
            foreach (var combination in combinations)
            {
                var fileName = GetFileName(hasMultipleFiles || docFiles.Count > 1, combination.Values, file.Name);

                var download = new Download
                {
                    FileName = fileName,
                    Progress = 0.75,
                    Status = DownloadStatus.InProgress,
                    IsProgressIndeterminate = true
                };
                if (_downloads.ContainsKey(fileName))
                {
                    _downloads[fileName] = download;
                }
                else
                {
                    _downloads.Add(download.FileName, download);
                }
            }
        }
    }

    private string GetFileName(bool hasMultipleFiles, IEnumerable<string> combinationsValues, string inputFileName)
    {
        var fileName = inputFileName;

        if (hasMultipleFiles)
        {
            fileName = $"{Path.GetFileNameWithoutExtension(fileName)}_{Helper.SanitizeFileName(string.Join("_", combinationsValues)) + ".docx"}";
        }

        return fileName;
    }

    private static async Task DelayDotNetToUpdateUIAsync(int timeInMs = 100)
    {
        await Task.Delay(timeInMs).ConfigureAwait(true);
    }

    private void PrepareUIToReplaceAndDownload()
    {
        _progressBar = true;
        _btnReplaceText = Localizer["btnReplaceTextReplacing"];
        _btnReplaceIcon = Icons.Material.Filled.HourglassEmpty;
    }

    private void SetDefaultUIAfterDownload()
    {
        _progressBar = false;
        _snackBarIsOpen = false;
        _progressBarValue = 0;
        SetDefaultValuesForBtnReplace();
    }

    private void SetDefaultUIAfterError()
    {
        _progressBar = false;
        SetDefaultValuesForBtnReplace();
    }

    private void SetDefaultValuesForBtnReplace()
    {
        _btnReplaceText = Localizer["btnReplaceTextDefault"];
        _btnReplaceIcon = Icons.Material.Filled.FindReplace;
    }

    private void ReloadUI()
    {
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        _btnReplaceText = Localizer["btnReplaceTextDefault"];

        await base.OnInitializedAsync().ConfigureAwait(true);
    }

    private async Task OnPresetDocumentChanged(Document updatedDoc)
    {
        _doc.DocumentValues = updatedDoc.DocumentValues;
        await InvokeAsync(StateHasChanged).ConfigureAwait(true);
    }
}