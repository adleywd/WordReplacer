@using WordReplacer.Dto
@inject ISnackbar Snackbar

<MudStack Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                   Accept=".docx, .doc"
                   @ref="@_fileUpload"
                   MaximumFileCount="20"
                   OnFilesChanged="OnInputFileChanged"
                   AppendMultipleFiles
                   Hidden="@false"
                   InputClass="absolute mud-width-full mud-height-full overflow-auto z-10"
                   InputStyle="opacity:0;"
                   tabindex="-1"
                   @ondrop="@ClearDragClass"
                   @ondragenter="@SetDragClass"
                   @ondragleave="@ClearDragClass"
                   @ondragend="@ClearDragClass">
        <ActivatorContent>
            <MudPaper Height="200px"
                      Outlined="true"
                      Class="@_dragClass">
                <MudText Typo="Typo.h6" Class="d-flex align-center justify-center">
                    Drag and drop files or click here
                    &nbsp;
                    <MudIcon Icon="@Icons.Custom.FileFormats.FileWord" Size="Size.Medium" Color="Color.Primary" Class="fa-align-justify justify-content-center cen"/>
                </MudText>
                @foreach (var file in _fileNames)
                {
                    <MudChip T="string"
                             Color="Color.Dark"
                             Text="@file.Name"
                             tabindex="-1"/>
                }
            </MudPaper>
        </ActivatorContent>
    </MudFileUpload>
    <MudToolBar Gutters="@false"
                Class="relative d-flex justify-end gap-4">
        <MudButton Color="Color.Warning"
                   Disabled="@(_fileNames.Count == 0)"
                   OnClick="@ClearAsync"
                   Variant="Variant.Filled"
                   Style="align-content: center">
            <MudIcon Icon="@Icons.Material.Outlined.Delete" /> Remove all files 
        </MudButton>
    </MudToolBar>
</MudStack>
@code {
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private readonly List<FileUploadDto> _fileNames = new();
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;

    private async Task ClearAsync()
    {
        await (_fileUpload?.ClearAsync() ?? Task.CompletedTask);
        _fileNames.Clear();
        ClearDragClass();
    }

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private async Task  OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var browserFiles = e.GetMultipleFiles();
        const int maxFileSize = 20 * 1024 * 1024; // 20MB
        
        foreach (var browserFile in browserFiles)
        {
            if (browserFile.Size > maxFileSize)
            {
                Snackbar.Add($"File {browserFile.Name} is too large. Max file size is {maxFileSize / 1024 / 1024}MB", Severity.Error);
                return;
            }
            
            if (browserFile.ContentType != "application/vnd.openxmlformats-officedocument.wordprocessingml.document")
            {
                Snackbar.Add($"File {browserFile.Name} is not a word document", Severity.Error);
                return;
            }
            
            await using Stream stream = browserFile.OpenReadStream(maxAllowedSize: maxFileSize);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            
            _fileNames.Add(new FileUploadDto
            {
                Name = browserFile.Name,
                Type = browserFile.ContentType,
                Size = browserFile.Size,
                LastModified = browserFile.LastModified,
                Content = memoryStream.ToArray()
            });
        }
   
    }

    private void Upload()
    {
        // Upload the files here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("TODO: Upload your files!");
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}