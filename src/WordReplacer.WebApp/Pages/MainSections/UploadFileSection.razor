@using WordReplacer.Dto
@inject ISnackbar Snackbar
@inject IStringLocalizer<InputFileResource> Localizer
@inject IJSRuntime JsRuntime

<MudStack Style="width: 100%;">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                   Accept=".docx, .doc"
                   @ref="@_browserFiles"
                   MaximumFileCount="@MaxFileCount"
                   OnFilesChanged="OnInputFileChanged"
                   AppendMultipleFiles="@true"
                   Hidden="@false"
                   InputClass="absolute mud-width-full mud-height-full overflow-auto z-10"
                   InputStyle="opacity:0; cursor: pointer;"
                   tabindex="-1"
                   @ondrop="@ClearDragClass"
                   @ondragenter="@SetDragClass"
                   @ondragleave="@ClearDragClass"
                   @ondragend="@ClearDragClass">
        <ActivatorContent>
            <MudPaper Height="80px"
                      Outlined="true"
                      Class="@_dragClass">
                <MudText Typo="Typo.h6" Class="d-flex align-center justify-center">
                    <MudIcon 
                        Icon="@Icons.Custom.FileFormats.FileWord" 
                        Size="Size.Medium" 
                        Color="Color.Info"
                        Class="fa-align-justify justify-content-center me-1"/>
                    @Localizer["selectFileLabel"]
                </MudText>
            </MudPaper>
        </ActivatorContent>
    </MudFileUpload>
    @if (Files.Count > 0)
    {
        <MudPaper Elevation="0" Class="p-2 mt-2 mb-1 overflow-y-auto" MinHeight="40px"  MaxHeight="80px">
            @if(Files.Count > 1)
            {
                <MudChip T="string"
                         Icon="@Icons.Material.Outlined.Close"
                         Color="Color.Error"
                         Text="Remove all files"
                         OnClick="@RemoveAllFilesAsync"
                         tabindex="-1"
                         Style="cursor: pointer"/>
            }
            @foreach (var file in Files.Values.OrderBy(f => f.Name))
            {
                <MudChip
                    T="string"
                    OnClick="@(() => RemoveSingleFileAsync(file.Name))"
                    Icon="@Icons.Material.Outlined.Close"
                    Color="Color.Dark"
                    Text="@file.Name"
                    tabindex="-1"
                    Style="cursor: pointer"/>
            }
        </MudPaper>
    }
</MudStack>

@code {
    [Parameter] public required Dictionary<string, FileUploadDto> Files { get; set; }
    [Parameter] public EventCallback FilesChanged { get; set; }
    private const int MaxFileCount = 20;
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _browserFiles;

    private Task OpenFilePickerAsync()
        => _browserFiles?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var browserFiles = e.GetMultipleFiles(MaxFileCount);
        const int maxFileSize = 20 * 1024 * 1024; // 20MB

        foreach (var browserFile in browserFiles)
        {
            if (browserFile.Size > maxFileSize)
            {
                Snackbar.Add($"File {browserFile.Name} is too large. Max file size is {maxFileSize / 1024 / 1024}MB", Severity.Error);
                continue;;
            }

            if (browserFile.ContentType != "application/vnd.openxmlformats-officedocument.wordprocessingml.document")
            {
                Snackbar.Add($"File {browserFile.Name} is not a Word document", Severity.Error);
                continue;;
            }

            // Ensure the latest uploaded files is used.
            if (Files.ContainsKey(browserFile.Name))
            {
                Files.Remove(browserFile.Name);
            }

            await using Stream stream = browserFile.OpenReadStream(maxAllowedSize: maxFileSize);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);

            Files.Add(
                browserFile.Name,
                new FileUploadDto
                {
                    Name = browserFile.Name,
                    Type = browserFile.ContentType,
                    Size = browserFile.Size,
                    LastModified = browserFile.LastModified,
                    Content = memoryStream.ToArray()
                });

            await FilesChangesAsync();
        }
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;

    private async Task RemoveSingleFileAsync(string fileName)
    {
        Files.Remove(fileName);
        await FilesChangesAsync();
    }

    private async Task RemoveAllFilesAsync()
    {
        await (_browserFiles?.ClearAsync() ?? Task.CompletedTask);
        Files.Clear();
        ClearDragClass();
        await FilesChangesAsync();
    }

    private async Task FilesChangesAsync()
    {
        await FilesChanged.InvokeAsync(null);
        StateHasChanged();
    }

}