@inject IStringLocalizer<GeneralResource> Localizer
@inject ISnackbar Snackbar

<MudGrid Row="true" Justify="Justify.Center" Spacing="5" Class="m-4">
    <MudItem xs="12">
        <div class="d-flex align-center justify-space-between">
            <MudTextField 
                @bind-Value="_textToReplace" 
                Label="@Localizer["labelTextAddValues"]"
                Immediate="true"
                Variant="Variant.Text"
                @onkeydown="OnEnterPressed"/>
            <MudButton
                Variant="Variant.Filled"
                StartIcon="@Icons.Material.Filled.Add"
                OnClick="AddValueToReplace"
                Color="Color.Primary"
                Size="Size.Large"
                Class="ml-4"
                Disabled="@(string.IsNullOrEmpty(_textToReplace))">
                @Localizer["buttonTextAddValues"]
            </MudButton>
        </div>
    </MudItem>
</MudGrid>

@code {
    [Parameter] public IList<string> TextsToBeReplaced { get; set; } = [];
    [Parameter] public EventCallback OnAddValues { get; set; }

    private bool _addValueButtonDisabled = true;
    private string _textToReplace = string.Empty;

    private void AddValueToReplace()
    {
        if (string.IsNullOrEmpty(_textToReplace))
        {
            Snackbar.Add("Text cannot be empty", Severity.Error);
            return;
        }

        if (TextsToBeReplaced.Contains(_textToReplace))
        {
            var text = $"\"{_textToReplace}\"";
            Snackbar.Add(string.Format(Localizer["valueAlreadyAddedError"], text), Severity.Error);
            return;
        }

        TextsToBeReplaced.Add(_textToReplace);
        OnAddValues.InvokeAsync(null);
        _textToReplace = string.Empty;
        StateHasChanged();
    }

    private void OnEnterPressed(KeyboardEventArgs e)
    {
        if (e.Code is not ("Enter" or "NumpadEnter"))
        {
            return;
        }
        
        if(!string.IsNullOrEmpty(_textToReplace))
        {
            AddValueToReplace();
        }
    }

}