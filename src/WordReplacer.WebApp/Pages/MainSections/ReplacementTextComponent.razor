@using MarkupString = Microsoft.AspNetCore.Blazor.MarkupString
@inject IStringLocalizer<GeneralResource> GeneralLocalizer
@inject IStringLocalizer<ReplacementTextResource> ReplacementTextLocalizer


<MudPaper Class="p-4">
    @if (Document.DocumentValues.Count > 0)
    {
        <MudExpansionPanels MultiExpansion="true" Elevation="10">
            @foreach (KeyValuePair<DocumentValue, DocumentValue> doc in Document.DocumentValues)
            {
                <MudExpansionPanel @bind-Expanded="doc.Key.IsAccordionOpen">
                    <TitleContent>
                        <div class="d-flex align-content-center justify-content-center">
                            <MudIcon Icon="@Icons.Material.Filled.FindReplace" class="mr-3"></MudIcon>
                            <MudText>
                                <u>@doc.Key.Text</u> @ReplacementTextLocalizer["accordionTitleReplaceText"] 
                                <u>
                                    
                                    @if (string.IsNullOrEmpty(doc.Value.Text))
                                    {
                                        <span>_</span>
                                    }
                                    else
                                    {
                                        if (doc.Value.Text.Contains(doc.Value.Delimiter))
                                        {
                                            var textValuesSplit = doc.Value.Text.Split([doc.Value.Delimiter], StringSplitOptions.RemoveEmptyEntries);
                                            var txtValueWithAnd = string.Join(" & ", textValuesSplit);
                                            @txtValueWithAnd
                                        }
                                        else
                                        {
                                            @doc.Value.Text
                                        }
                                    }
                                </u>
                            </MudText>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <MudGrid Row="true" Justify="Justify.Center" Spacing="5" Class="m-4">
                            <MudItem xs="12">
                                <div class="d-flex align-center p-1">
                                    <!-- Text to Replace (readonly) -->
                                    <MudTextField
                                        T="string"
                                        Label="@string.Format(GeneralLocalizer["headerOriginalValues"])"
                                        Text="@doc.Key.Text"
                                        HelperText="@doc.Key.HelperText"
                                        Disabled="true"
                                        Variant="Variant.Text"/>

                                    <!-- New Replacement Input -->
                                    <MudTextField
                                        T="string"
                                        Label="@string.Format(GeneralLocalizer["newDocumentLabel"], doc.Key.Text)"
                                        Placeholder="doc.value.HelperText"
                                        @bind-Value="doc.Value.Text"
                                        HelperText="@doc.Value.HelperText"
                                        HelperTextOnFocus="true"
                                        Variant="Variant.Text"
                                        Lines="1"
                                        Immediate="true"
                                        AutoGrow="true"
                                        Class="ml-4"/>

                                    <!-- Remove value Button -->
                                    <MudSelect @bind-Value="@doc.Value.Delimiter" 
                                               Label="Delimiter" 
                                               HelperTextOnFocus="true"
                                               HelperText="This will be used to split the new replacement text"
                                               Class="ml-4">
                                        <MudSelectItem Value="@(@"\n")">Enter / Nova linha</MudSelectItem>
                                        <MudSelectItem Value="@(";")">Ponto e vírgula (;)</MudSelectItem>
                                        <MudSelectItem Value="@(":")">Dois pontos (:)</MudSelectItem>
                                        <MudSelectItem Value="@(".")">Ponto final (.)</MudSelectItem>
                                        <MudSelectItem Value="@("|")">Barra vertical (|)</MudSelectItem>
                                        <MudSelectItem Value="@(",")">Vírgula (,)</MudSelectItem>
                                        <MudSelectItem Value="@(@"\t")">Tabulação (Tab)</MudSelectItem>
                                        <MudSelectItem Value="@("custom")">Outro (especificar)</MudSelectItem>
                                    </MudSelect>
                                    
                                    @if(doc.Value.Delimiter == "custom")
                                    {
                                        <MudTextField
                                            T="string"
                                            Label="Custom Delimiter"
                                            @bind-Value="doc.Value.CustomDelimiter"
                                            HelperText="Choose your delimiter"
                                            HelperTextOnFocus="true"
                                            Variant="Variant.Text"
                                            Lines="1"
                                            Immediate="true"
                                            AutoGrow="true"
                                            Class="ml-4"/>
                                    }
                                    
                                    <!-- Remove value Button -->
                                    <MudButton Variant="Variant.Outlined"
                                               StartIcon="@Icons.Material.Filled.Delete"
                                               ButtonType="ButtonType.Button"
                                               Color="Color.Error"
                                               Class="ml-4"
                                               OnClick="() => RemoveItemsFromDictAsync(doc)">
                                        @GeneralLocalizer["btnRemoveReplacementLine"]
                                    </MudButton>
                                </div>
                            </MudItem>
                        </MudGrid>
                    </ChildContent>
                </MudExpansionPanel>
            }
        </MudExpansionPanels>
    }
    else
    {
        <MudAlert Severity="Severity.Info" Variant="Variant.Filled" Icon="@Icons.Material.Outlined.Info">
            @GeneralLocalizer["emptyValueListInfo"]
        </MudAlert>
    }
</MudPaper>

@code {
    [Parameter] public required Document Document { get; set; }
    [Parameter] public EventCallback<Document> DocumentChanged { get; set; }

    private async Task RemoveItemsFromDictAsync(KeyValuePair<DocumentValue, DocumentValue> doc)
    {
        Document.DocumentValues.Remove(doc);
        await DocumentChanged.InvokeAsync(Document);
    }
}