@page "/"
@using WordReplacer.Dto
@using WordReplacer.WebApp.Pages.MainSections
@using WordReplacer.WebApp.Services
@inject IStringLocalizer<GeneralResource> Localizer
@inject IDocumentProcessingService DocumentProcessingService


<MudPaper Width="100%" Class="mt-5 mb-5 pb-5 pt-5" Elevation="5">
    <MudContainer>
        <UploadFileComponent @bind-Files="_doc.Files" />
        <MudDivider DividerType="DividerType.FullWidth" Class="mt-3 mb-3" />
        <AddTextToReplaceComponent @bind-Document="_doc"/>
    </MudContainer>
</MudPaper>
<MudDivider DividerType="DividerType.FullWidth" Class="mt-3 mb-3" />
<MudPaper Width="100%" Class="mt-5 mb-5 pb-5 pt-5" Elevation="5">
    <MudContainer>
        <ReplacementTextComponent @bind-Document="_doc" />
        @if (ShouldDisplayReplacementButtons)
        {
            <MudStack Row="true" AlignItems="AlignItems.End" Justify="Justify.FlexEnd" Class="mt-5">
                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="ClearReplacements">
                    Clear all replacements
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@HandleWordReplacementAsync">
                    @Localizer["btnReplaceTextDefault"]
                    @* @Localizer["btnReplaceTextReplacing"] *@
                </MudButton>
            </MudStack>
        }
    </MudContainer>
</MudPaper>
@code {
    private Document _doc = new();
    
    private bool ShouldDisplayReplacementButtons => _doc.DocumentValues.Count > 0;
    
    private async Task HandleWordReplacementAsync()
    {
        await DocumentProcessingService.ReplaceWordsAsync(_doc);
    }

    private void ClearReplacements()
    {
        _doc.DocumentValues.Clear();
        StateHasChanged();
    }
}
