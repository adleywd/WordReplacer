@inherits LayoutComponentBase
@using WordReplacer.UI.Components
@using System.Globalization
@using WordReplacer.Common
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigation

<MatThemeProvider Theme="@_primaryTheme">
    <MatAnchorUtils></MatAnchorUtils>
    <MatAppBar Style="z-index: 100;">
        <MatAppBarRow>
            <MatAppBarSection>
                <MatIconButton Icon="menu" OnClick="@((e) => MenuButtonClicked())"></MatIconButton>
                <MatIcon><img style="width: 100%;" src="_content/WordReplacer.UI/img/wr-logo-white-nobg-64x64.png" alt="Word Replacer Logo"/></MatIcon>
                <MatAppBarTitle Style="margin-left: 0;">Word Replacer</MatAppBarTitle>
            </MatAppBarSection>
            <MatAppBarSection Align="@MatAppBarSectionAlign.End">
                @if (_selectedLanguage != "pt")
                {
                    <MatIconButton OnClick="@(() => ChangeUIToLanguage("pt"))">
                        <img class="text-centered-in-btn" src="_content/WordReplacer.UI/img/flag-brazil.svg" />
                </MatIconButton>
                }
                @if (_selectedLanguage != "en")
                {
                    <MatIconButton OnClick="@(() => ChangeUIToLanguage("en"))">
                        <img class="text-centered-in-btn" src="_content/WordReplacer.UI/img/flag-united-states.svg" />
                    </MatIconButton>
                }
                <MatIconButton Link="https://github.com/adleywd" Target="_blank">
                    <i class="fa fa-github text-centered-in-btn" aria-hidden="true"></i>
                </MatIconButton>
            </MatAppBarSection>
        </MatAppBarRow>
    </MatAppBar>
    
    <MatToastContainer />

    <MatDrawerContainer Style="width: 100vw; height: 100vh;" Class="mat">

        <MatHidden 
            Breakpoint="@MatBreakpoint.SM" 
            Direction="@MatHiddenDirection.Up" 
            HiddenChanged="@ModelDrawerHiddenChanged">
            <ChildContent>
                <MatDrawer @bind-Opened="@_navMenuOpened" Mode="@MatDrawerMode.Modal" Style="background-color: #fafafa;">
                    <MatAppBarAdjust></MatAppBarAdjust>
                    <NavMenuContent/>
                </MatDrawer>
            </ChildContent>
            <ElseContent>
                <MatDrawer @bind-Opened="@_navMenuOpened" Mode="@MatDrawerMode.Dismissible" Style="background-color: #fafafa;">
                    <MatAppBarAdjust></MatAppBarAdjust>
                    <NavMenuContent/>
                </MatDrawer>
            </ElseContent>
        </MatHidden>


        <MatDrawerContent Class="mdc-theme--background">
            <MatAppBarAdjust></MatAppBarAdjust>
            <div class="body-wrapper ps-3 pe-3 pt-2 pb-2">
                @Body
            </div>
        </MatDrawerContent>
        <ApplicationUpdateComponent/>
    </MatDrawerContainer>
</MatThemeProvider>

@code
{
    // Navbar should start closed
    private bool _navMenuOpened = false;

    private string _selectedLanguage = "";

    private async Task ChangeUIToLanguage(string language)
    {
        _selectedLanguage = language;
        var newCulture = new CultureInfo(language);
        Thread.CurrentThread.CurrentCulture = newCulture;
        Thread.CurrentThread.CurrentUICulture = newCulture;
        CultureInfo.DefaultThreadCurrentCulture = newCulture;
        CultureInfo.DefaultThreadCurrentUICulture = newCulture;
        await LocalStorage.SetItemAsStringAsync(AppSettings.LanguageStoreKey, language);
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }

    private void ModelDrawerHiddenChanged(bool hidden)
    {
        if (!hidden)
        {
            _navMenuOpened = false;
        }
    }

    private void MenuButtonClicked()
    {
        _navMenuOpened = !_navMenuOpened;
        StateHasChanged();
    }

    private readonly MatTheme _primaryTheme = new ()
    {
        Primary = MatThemeColors.DeepPurple._700.Value,
        Secondary = MatThemeColors.DeepPurple._300.Value,
        Background = MatThemeColors.Grey._200.Value
    };

    protected override async Task OnInitializedAsync()
    {
        _selectedLanguage = CultureInfo.CurrentCulture.TwoLetterISOLanguageName;

        if (await LocalStorage.ContainKeyAsync(AppSettings.LanguageStoreKey))
        {
            _selectedLanguage = await LocalStorage.GetItemAsStringAsync(AppSettings.LanguageStoreKey);
        }
        else if(_selectedLanguage != "pt" && _selectedLanguage != "en")
        {
            _selectedLanguage = "en";
        }

        await base.OnInitializedAsync();
    }
}