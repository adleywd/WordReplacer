@{
    var showDownloadPopupClass = IsDownloadsListVisible ? "d-block" : "d-none";
    var showFabButton = !IsDownloadsListVisible ? "d-block" : "d-none";
}

<div class="toast-container p-3 fixed-bottom-right fade-in fab @showDownloadPopupClass" data-bs-autohide="true" data-bs-delay="5000">
    <div class="toast show small-radius" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header ms-2 mt-1">
            <strong class="me-auto primary-color">@HeaderText</strong>
            @if (HasCloseButton)
            {
                <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
            }
        </div>

        <div class="toast-body">
            @Content
        </div>
    </div>
</div>

<style>
    .app-fab--absolute {
                    position: fixed;
                    bottom: 1rem;
                    right: 1rem;
                }
</style>

<div class="fade-in @showFabButton">
    <MatFAB Class="app-fab--absolute fab" Icon="@MatIconNames.Save_alt" OnClick="Toggle"></MatFAB>
</div>

@code {

    [Parameter]
    public RenderFragment? Content { get; set; }
    
    [Parameter]
    public bool IsDownloadsListVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public string? HeaderText { get; set; }

    [Parameter]
    public bool HasCloseButton { get; set; } = true;

    private void Toggle()
    {
        IsDownloadsListVisible = !IsDownloadsListVisible;
        StateHasChanged();
    }
    
    public void Show()
    {
        IsDownloadsListVisible = true;
        StateHasChanged();
    }

    public void Close()
    {
        IsDownloadsListVisible = false;
        StateHasChanged();
    }

    public void ShowCloseButton()
    {
        HasCloseButton = true;
        StateHasChanged();
    }

    public void HideCloseButton()
    {
        HasCloseButton = false;
        StateHasChanged();
    }
}