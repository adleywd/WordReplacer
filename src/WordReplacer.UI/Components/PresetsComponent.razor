@using WordReplacer.Models
@using System.Text.Json
@inject IMatDialogService MatDialogService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IMatToaster Toaster

<MatButton OnClick="@(() => { _savePresetDialogIsOpen = true; _presetSaveName = string.Empty; })" Raised="false">Save</MatButton>
@if (_documentsKeysList.Count > 0)
{
    <MatButton Class="ms-1" OnClick="@(() => { _loadPresetDialogIsOpen = true; _selectedPresetToLoad = string.Empty; })" Raised="false">Load</MatButton>

    <MatButton Class="ms-1" OnClick="@(() => { _deletePresetDialogIsOpen = true; _selectedPresetToDelete = string.Empty; })" Raised="false">Delete</MatButton>
}



<MatDialog @bind-IsOpen="@_loadPresetDialogIsOpen">
    <MatDialogTitle>Load presets</MatDialogTitle>
    <MatDialogContent>
        @if (_documentsKeysList.Count > 0)
        {
            <MatSelectValue @bind-Value="@_selectedPresetToLoad" Items="@_documentsKeysList" ValueSelector=@(i=>i.ToString())></MatSelectValue>
        }
    </MatDialogContent>
    <MatDialogActions>
        <MatButton Raised="true" OnClick="ReadLocalStorageAsync">
            Load
        </MatButton>
        <MatButton OnClick="@(() => _loadPresetDialogIsOpen = false)">
            Close
        </MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@_savePresetDialogIsOpen">
    <MatDialogTitle>Save presets</MatDialogTitle>
    <MatDialogContent>
        <MatTextField @bind-Value="@_presetSaveName" Label="Preset name"></MatTextField>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton Raised="true" OnClick="SaveLocalStorageAsync">
            Save
        </MatButton>
        <MatButton OnClick="@(() => _savePresetDialogIsOpen = false)">
            Close
        </MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@_deletePresetDialogIsOpen">
    <MatDialogTitle>Delete presets</MatDialogTitle>
    <MatDialogContent>
        <MatSelectValue @bind-Value="@_selectedPresetToDelete" Items="@_documentsKeysList" ValueSelector=@(i=>i.ToString())></MatSelectValue>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="DeleteLocalStorageAsync">
            Delete
        </MatButton>
        <MatButton OnClick="DeleteAllLocalStorageAsync"> Delete All</MatButton>
        <MatButton Raised="true" OnClick="@(() => _deletePresetDialogIsOpen = false)">
            Close
        </MatButton>
    </MatDialogActions>
</MatDialog>

@code {

    [Parameter]
    public Document Document { get; set; } = new();

    [Parameter]
    public EventCallback<Document> DocumentChanged { get; set; }

    private bool _loadPresetDialogIsOpen;

    private bool _savePresetDialogIsOpen;

    private bool _deletePresetDialogIsOpen;

    private List<string> _documentsKeysList = new();

    private const string DocumentsSavesKey = "documents_saves";

    private string _selectedPresetToLoad = string.Empty;

    private string _selectedPresetToDelete = string.Empty;

    private string _presetSaveName = string.Empty;

    private async Task SaveLocalStorageAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(_presetSaveName))
            {
                Toaster.Add("Empty preset name is not allowed", MatToastType.Danger);
                return;
            }

            if (_documentsKeysList.Contains(_presetSaveName) || await LocalStorage.ContainKeyAsync(_presetSaveName))
            {
                Toaster.Add("Duplicate preset name is not allowed", MatToastType.Danger);
                return;
            }

            if (Document.DocumentValues.Count == 0)
            {
                Toaster.Add("Add some values before creating the preset", MatToastType.Danger);
                return;
            }

            _documentsKeysList.Add(_presetSaveName);
            var documentValuesKeysListSerialized = JsonSerializer.Serialize(_documentsKeysList);
            await LocalStorage.SetItemAsync(DocumentsSavesKey, documentValuesKeysListSerialized);

            var newDocumentsValuesSerialized = JsonSerializer.Serialize(Document.DocumentValues);
            await LocalStorage.SetItemAsync(_presetSaveName, newDocumentsValuesSerialized);
            Toaster.Add($"{_presetSaveName} was successfully saved", MatToastType.Success);
        }
        catch
        {
            Toaster.Add($"Error while saving the preset {_presetSaveName}", MatToastType.Danger);
        }
        finally
        {
            _presetSaveName = string.Empty;
            await DocumentHasChanged();
            CloseAllDialogs();
        }
    }

    private async Task ReadLocalStorageAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(_selectedPresetToLoad))
            {
                Toaster.Add($"Select a preset to load", MatToastType.Danger);
                return;
            }

            if (Document.DocumentValues.Count > 0)
            {
                var shouldContinueLoading = await MatDialogService.ConfirmAsync("You will lose your current preset if it is not saved");
                if (!shouldContinueLoading)
                {
                    return;
                }
            }

            var documentValues = await LocalStorage.GetItemAsync<string>(_selectedPresetToLoad);
            var result = JsonSerializer.Deserialize<List<KeyValuePair<DocumentValue, DocumentValue>>>(documentValues);
            Document.DocumentValues = result ?? new();
            Toaster.Add($"{_selectedPresetToLoad} was successfully loaded", MatToastType.Success);
        }
        catch
        {
            Toaster.Add($"Error while loading the preset {_selectedPresetToLoad}", MatToastType.Danger);
        }
        finally
        {
            _selectedPresetToLoad = string.Empty;
            await DocumentHasChanged();
            CloseAllDialogs();
        }
    }

    private async Task DeleteLocalStorageAsync()
    {
        try
        {
            if (_documentsKeysList.Count == 0)
            {
                Toaster.Add($"There is not items to delete", MatToastType.Danger);
                return;
            }

            if (string.IsNullOrEmpty(_selectedPresetToDelete))
            {
                Toaster.Add($"Select a preset to download", MatToastType.Danger);
                return;
            }

            _documentsKeysList.Remove(_selectedPresetToDelete);
            await LocalStorage.RemoveItemAsync(_selectedPresetToDelete);
            Toaster.Add($"{_selectedPresetToDelete} was successfully deleted", MatToastType.Success);
            
        }
        catch
        {
            Toaster.Add($"Error while deleting the preset {_selectedPresetToDelete}", MatToastType.Danger);
        }
        finally
        {
            CloseAllDialogs();
            StateHasChanged();
        }
    }

    private async Task DeleteAllLocalStorageAsync()
    {
        try
        {
            var shouldDelete = await MatDialogService.ConfirmAsync("This will delete all presets");
            if (!shouldDelete)
            {
                return;
            }

            await LocalStorage.ClearAsync();
            _documentsKeysList = new();
            Toaster.Add($"All presets were successfully deleted", MatToastType.Success);
        }
        catch
        {
            Toaster.Add($"Error while removing all preset", MatToastType.Danger);
        }
        finally
        {
            CloseAllDialogs();
            StateHasChanged();
        }
    }

    private void CloseAllDialogs()
    {
        _loadPresetDialogIsOpen = false;
        _savePresetDialogIsOpen = false;
        _deletePresetDialogIsOpen = false;
    }

    private async Task DocumentHasChanged()
    {
        await DocumentChanged.InvokeAsync(Document);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var documentsKeysStringList = await LocalStorage.GetItemAsync<string>(DocumentsSavesKey);
            if (string.IsNullOrEmpty(documentsKeysStringList))
            {
                _documentsKeysList = new List<string>(); 
                return;
            }

            _documentsKeysList = JsonSerializer.Deserialize<List<string>>(documentsKeysStringList) ?? new List<string>();
        }
        catch
        {
            Toaster.Add("Error while loading the saved presets", MatToastType.Danger);
        }
        finally
        {
            await base.OnInitializedAsync();
        }
    }

}
