@page "/"
@using WordReplacer.Utilities
@using WordReplacer.Models
@using WordReplacer.Dto
@using WordReplacer.Enums
@inject IDocumentService DocumentService
@inject IJSRuntime JsRuntime;

<PageTitle>Word Replacer</PageTitle>
<hr />
<div class="container-fluid">

    <MatPaper Elevation="6" Class="p-3">
        <div class="row">
            <div class="col-12 mt-3">
                <MatFileUpload OnChange="@FilesReady" Label="Drop a Word .docx file or Browse here" />
                @if (_doc.File is not null)
                {
                    <div class="alert alert-info">@_doc.File.Name</div>
                }
            </div>
        </div>
        <hr />
        <EditForm Model="_docParamsDto" OnValidSubmit="AddValues">
            <div class="row">
                <div class="col-lg-6 col-md-6 col-sm-12 mt-2">
                    <MatTextField @bind-Value="_docParamsDto.Text"
                                  OnInput="@(e => _docParamsDto.Text = e.Value?.ToString())"
                                  HelperText="The text that will be replaced"
                                  Label="Value to be replaced"
                                  FullWidth="true" />
                </div>
                <div class="col-lg-6 col-md-6 col-sm-12 mt-2">
                    <label>The field you want for your new input</label>
                    <br />
                    <MatRadioGroup @bind-Value="_docParamsDto.Type" Items="@(Enum.GetValues(typeof(InputType)).Cast<InputType>())" />
                </div>
            </div>
            <div class="row">
                <div class="col-12 mb-2 justify-content-center text-center">
                    <MatButton Icon="add"
                               Style="width: 98%"
                               Raised="true"
                               Disabled="_docParamsDto.IsTextEmpty">
                        Add value
                    </MatButton>
                </div>
            </div>
        </EditForm>
    </MatPaper>
    <hr />
    @if (_doc.DocumentValues.Count > 0)
    {
        <div class="row">
            <div class="col-lg-5 col-md-5 col-sm-12 mt-2">
                <h3>Old values</h3>
            </div>
            <div class="col-lg-5 col-md-5 col-sm-12 mt-2">
                <h3>New values</h3>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-info justify-content-center">
            <p class="text-center justify-content-center">Select a file and add some values to begin the replacement</p>
        </div>
    }
    <EditForm Model="_doc" OnValidSubmit="HandleSubmitAsync" class="col-12 mt-3">
        <DataAnnotationsValidator />

        <MatAccordion Multi="true">
            @foreach (var docValue in _doc.DocumentValues)
            {
                @if (docValue.Value.ShouldReplaceForEachLine)
                {
                    <MatTooltip Tooltip="@($"{docValue.Key.Text} will be replaced for {docValue.Value.Text!.Replace("\n", " & ")}")"
                                Wrap="true"
                                Position="MatTooltipPosition.Top"
                                TargetId="@docValue.Key.HtmlId">
                    </MatTooltip>
                }
                else
                {
                    <MatTooltip Tooltip="@($"{docValue.Key.Text} will be replaced for {docValue.Value.Text}")"
                            Wrap="true"
                            Position="MatTooltipPosition.Top"
                            TargetId="@docValue.Key.HtmlId">
                    </MatTooltip>
                }
                <MatExpansionPanel @bind-Expanded="docValue.Key.IsAccordionOpen">
                    <MatExpansionPanelSummary Style="height: auto;" Id="@docValue.Key.HtmlId">
                        <div class="row" style=" width: 100%;">
                            <div class="col-lg-5 col-md-5 col-sm-12 mt-2 text-wrap">
                                <b class="text-decoration-underline">@docValue.Key.Text</b>
                            </div>
                            <div class="col-lg-5 col-md-5 col-sm-12 mt-2 text-wrap">
                                <span>
                                    <b class="text-decoration-underline">@docValue.Value.Text</b>
                                </span>
                            </div>
                        </div>
                    </MatExpansionPanelSummary>
                    <MatExpansionPanelDetails>

                        @if (docValue.Value.Type == InputType.List)
                        {
                            <div class="row">
                                <div class="col-lg-5 col-md-5 col-sm-1"></div>
                                <div class="col-lg-5 col-md-5 col-sm-12">
                                    <MatSlideToggle @bind-Value="@docValue.Value.ShouldReplaceForEachLine"/>
                                    <span class="ms-1">Create file for each line in replace area</span>
                                </div>
                            </div>
                        }
                        <div class="row">
                            <div class="col-lg-5 col-md-5 col-sm-12 mt-2">
                                <MatTextField @bind-Value="docValue.Key.Text"
                                          Label="@docValue.Key.Label"
                                          OnInput="@(e => docValue.Key.Text = e.Value?.ToString())"
                                          HelperText="@docValue.Key.HelperText"
                                          FullWidth="true" />
                            </div>
                            @if (docValue.Value.Type is InputType.Text or InputType.List)
                            {
                                <div class="col-lg-5 col-md-5 col-sm-12 mt-2">
                                    <MatTextField @bind-Value="docValue.Value.Text"
                                          OnInput="@(e => docValue.Value.Text = e.Value?.ToString())"
                                          HelperText="@docValue.Value.HelperText"
                                          Label="@docValue.Value.Label"
                                          TextArea="@docValue.Value.Type.IsTextArea()"
                                          FullWidth="true"
                                          Style="background: white;" />
                                </div>
                            }
                            <div class="col-lg-2 col-md-2 col-sm-12 mt-2">
                                <MatButton Outlined="true"
                                       Icon="delete"
                                       OnClickStopPropagation="true"
                                       Type="button"
                                       OnClick="() => RemoveItemsFromDict(docValue.Key)">
                                    Remove
                                </MatButton>
                            </div>
                        </div>
                    </MatExpansionPanelDetails>
                </MatExpansionPanel>
            }
        </MatAccordion>
        <hr />
        @if (_doc.DocumentValues.Count > 0)
        {
            @if (_progressBar)
            {
                <MatProgressBar Class="mb-2" Indeterminate="true" Reversed="true"></MatProgressBar>
            }
            <MatButton Icon="@_btnReplaceIcon" Disabled="@(_doc.IsFileEmpty || _progressBar)" Raised="true">@_btnReplaceText</MatButton>
        }

    </EditForm>
    <MatSnackbar @bind-IsOpen="@_snackBarIsOpen">
        <MatSnackbarContent>@_errorDisplayText</MatSnackbarContent>
        <MatSnackbarActions>
            <MatButton Raised="true" OnClick="@(() => _snackBarIsOpen = false)">Close</MatButton>
        </MatSnackbarActions>
    </MatSnackbar>
</div>

@code
{
    private readonly Document _doc = new();
    private readonly DocumentParamsDto _docParamsDto = new();
    private List<string> _fileList = new();
    private bool _snackBarIsOpen;
    private string _errorDisplayText = string.Empty;
    private bool _progressBar = false;
    private string _btnReplaceText = "Replace and Download";
    private string _btnReplaceIcon = "find_replace";

    private void FilesReady(IMatFileUploadEntry[] files)
    {
        foreach (IMatFileUploadEntry file in files)
        {
            if (file.Type != "application/vnd.openxmlformats-officedocument.wordprocessingml.document")
            {
                DisplayErrorSnackBar("Only Word documents (.docx) are allowed.");
                _doc.File = null;
                _fileList = new List<string>();
                return;
            }
            _doc.File = file;
            _fileList.Add($"Selected file: {file.Name}");
        }
    }

    private void AddValues()
    {
        var oldValue = new DocumentValue()
            {
                Label = "Old Value",
                HtmlId = Guid.NewGuid().ToString(),
                IsOldValue = true,
                Text = _docParamsDto.Text,
                HelperText = "This is the old value",
                Type = InputType.Text,
                IsAccordionOpen = true
            };
        var newValue = new DocumentValue()
            {
                Label = $"New value for {_docParamsDto.Text}",
                HtmlId = Guid.NewGuid().ToString(),
                IsOldValue = false,
                Text = "",
                HelperText = "This is will be the new value",
                Type = _docParamsDto.Type,
                IsAccordionOpen = true,
                ShouldReplaceForEachLine = _docParamsDto.Type == InputType.List
            };
        _doc.DocumentValues.Add(oldValue, newValue);
        _docParamsDto.Text = string.Empty; // Cleat text field
    }

    private async Task HandleSubmitAsync()
    {
        _progressBar = true;
        _btnReplaceText = "Wait, Replacing... ";
        _btnReplaceIcon = "hourglass_empty";
        try
        {
            List<Task> taskListResult = await DocumentService.ReplaceAndDownloadAsync(_doc);
            await Task
            .WhenAll(taskListResult)
            // .WhenAll(taskListResult.Select(async task =>
            // {
            //     await task.ConfigureAwait(false);
            // }))
            .ContinueWith(t =>
            {
                SetDefaultValuesForBtnReplace();
                _progressBar = false;
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            DisplayErrorSnackBar("Something went wrong");
            SetDefaultValuesForBtnReplace();
            _progressBar = false;
        }
    }

    private void SetDefaultValuesForBtnReplace()
    {
        _btnReplaceText = "Replace and Download";
        _btnReplaceIcon = "find_replace";
    }
    
    private void DisplayErrorSnackBar(string errorMessage)
    {
        _snackBarIsOpen = true;
        _errorDisplayText = errorMessage;
        ReloadUI();
    }

    private void RemoveItemsFromDict(DocumentValue documentValue)
    {
        _doc.DocumentValues.Remove(documentValue);
    }

    private void ReloadUI()
    {
        InvokeAsync(StateHasChanged);
    }

}