@page "/"
@using WordReplacer.Models
@using WordReplacer.Dto
@using WordReplacer.Enums
@using WordReplacer.Utilities
@inject IDocumentService DocumentService
@inject IJSRuntime JSRuntime;

<PageTitle>Word Replacer</PageTitle>
<h2>
    <b>Word Replacer</b>
</h2>
<hr/>
<div class="container-fluid">
   
    <div class="row">
        <div class="col-12 mt-3">
            <MatFileUpload OnChange="@FilesReady" Label="Drop a file or Browse here"></MatFileUpload>
            @foreach (var file in _fileList)
            {
                <div class="alert alert-info">@file</div>
            }
        </div>
    </div>
    
    <EditForm Model="_docParamsDto" OnValidSubmit="AddValues">
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-12 mt-2">
                <MatTextField @bind-Value="_docParamsDto.Text"
                              HelperText="The text that will be replaced"
                              Label="Value to be replaced"
                              FullWidth="true"/>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-12 mt-2">
                <label>The field you want for your new input</label>
                <br/>
                <MatRadioGroup @bind-Value="_docParamsDto.Type" Items="@(Enum.GetValues(typeof(InputType)).Cast<InputType>())"/>
            </div>
        </div>
        <div class="row">
            <MatButton Raised="true" Disabled="_docParamsDto.IsTextEmpty">Add value</MatButton>
        </div>
    </EditForm>
    
    <EditForm Model="_doc" OnValidSubmit="HandleSubmitAsync" class="col-12 mt-3">
        <DataAnnotationsValidator/>
        @if (_doc.DocumentValues.Count > 0)
        {
            <div class="row">
                <div class="col-lg-5 col-md-5 col-sm-12 mt-2">
                    <h4>
                        <b>Replace this</b>
                    </h4>
                </div>
                <div class="col-lg-5 col-md-5 col-sm-12 mt-2">
                    <h4>
                        <b>For</b>
                    </h4>
                </div>
            </div>
        }
        @foreach (var docValue in _doc.DocumentValues)
        {
            <div class="row">
                <div class="col-lg-5 col-md-5 col-sm-12 mt-2">
                    <MatTextField @bind-Value="docValue.Key.Text"
                                  HelperText="@docValue.Key.HelperText"
                                  FullWidth="true"/>
                </div>

                <div class="col-lg-5 col-md-5 col-sm-12 mt-2">
                    <MatTextField @bind-Value="docValue.Value.Text"
                                  HelperText="@docValue.Value.HelperText"
                                  Label="@docValue.Value.Label"
                                  FullWidth="true"/>
                </div>
                <div class="col-lg-2 col-md-2 col-sm-12 mt-2">
                    <MatButton Outlined="true"
                               Icon="delete"
                               OnClickStopPropagation="true"
                               Type="button"
                               OnClick="() => RemoveItemsFromDict(docValue.Key)">
                        Remove
                    </MatButton>
                </div>
            </div>
            <hr/>
        }
        @if (_doc.DocumentValues.Count > 0)
        {
            <MatButton Disabled="@_doc.IsFileEmpty" Raised="true">Replace and Download</MatButton>
        }

    </EditForm>
</div>

@code
{
    private readonly Document _doc = new();
    private readonly DocumentParamsDto _docParamsDto = new();
    private List<string> _fileList = new();


    private void FilesReady(IMatFileUploadEntry[] files)
    {
        foreach (var file in files)
        {
            // if (file.Name.Split(".").Last() is not ("docx" or "doc"))
            if(file.Type != "application/vnd.openxmlformats-officedocument.wordprocessingml.document")
            {
                // TODO: Display toast
                _doc.File = null;
                _fileList = new List<string>();
                return;
            }
            _doc.File = file;
            _fileList.Add($"Selected file: {file.Name}");
        }
    }

    private void AddValues()
    {
        var oldValue = new DocumentValue()
        {
            Label = _docParamsDto.Text,
            HtmlId = Guid.NewGuid().ToString(),
            IsOldValue = true,
            Text = _docParamsDto.Text,
            HelperText = "This is the old value",
            Type = InputType.TextField
        };
        var newValue = new DocumentValue()
        {
            Label = $"New value for {_docParamsDto.Text}",
            HtmlId = Guid.NewGuid().ToString(),
            IsOldValue = false,
            Text = "",
            HelperText = "This is will be the new value",
            Type = InputType.TextField
        };
        _doc.DocumentValues.Add(oldValue, newValue);
        // _docParamsDto.Text = string.Empty; // Cleat text
    }

    private async Task HandleSubmitAsync()
    {
        Stream? wordStream = await DocumentService.Replace(_doc);
        if (wordStream is not null)
        {
            using var streamRef = new DotNetStreamReference(stream: wordStream);
            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "teste.docx", wordStream.ConvertToBase64());
        }
        else
        {
        }
    }

    private void RemoveItemsFromDict(DocumentValue documentValue)
    {
        _doc.DocumentValues.Remove(documentValue);
    }

    private void InvokeChangeState()
    {
        InvokeAsync(StateHasChanged);
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

}