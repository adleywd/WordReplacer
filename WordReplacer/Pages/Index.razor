@page "/"
@using WordReplacer.Models
@using WordReplacer.Dto
@using WordReplacer.Enums
@using WordReplacer.Utilities
@inject IDocumentService DocumentService
@inject IJSRuntime JSRuntime;

<PageTitle>Certificate Replacer</PageTitle>
<h2>
    <b>Certificate Replacer</b>
</h2>
<hr/>
<div class="container-fluid">

    <div class="row">
        <div class="col-12">
            <MatTextField @bind-Value="_docParamsDto.Label" HelperText="Label name to easy identify the input" Label="Label name"/>
            <MatRadioGroup @bind-Value="_docParamsDto.Type" Items="@(Enum.GetValues(typeof(InputType)).Cast<InputType>())"/>
            <br/>
            <MatButton Raised="true" OnClick="AddValues">Add value</MatButton>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <MatFileUpload OnChange="@FilesReady" Label="Drop a single file here or Browse"></MatFileUpload>
            @foreach (var file in _fileList)
            {
                <div>@file</div>
            }
        </div>
    </div>

    <EditForm Model="_doc" OnValidSubmit="HandleSubmit" class="col-12 mt-3">
        <DataAnnotationsValidator/>
        @if (_doc.DocumentValues.Count > 0)
        {
            <div class="row">
                <div class="col-lg-6 col-md-6 col-sm-12 mt-2">
                    <h4>
                        <b>Older Values</b>
                    </h4>
                </div>
                <div class="col-lg-6 col-md-6 col-sm-12 mt-2">
                    <h4>
                        <b>Newer Values</b>
                    </h4>
                </div>
            </div>
        }
        @foreach (var docValue in _doc.DocumentValues)
        {
            <div class="row">
                <div class="col-lg-6 col-md-6 col-sm-12 mt-2">
                    <MatTextField @bind-Value="docValue.Key.Text"
                                  HelperText="@docValue.Key.HelperText"
                                  Label="@docValue.Key.Label"
                                  FullWidth="true"/>
                </div>

                <div class="col-lg-6 col-md-6 col-sm-12 mt-2">
                    <MatTextField @bind-Value="docValue.Value.Text"
                                  HelperText="@docValue.Value.HelperText"
                                  Label="@docValue.Value.Label"
                                  FullWidth="true"/>
                </div>
            </div>
        }
        @if (_doc.DocumentValues.Count > 0)
        {
            <MatButton Raised="true">Replace</MatButton>
        }

    </EditForm>
</div>

@code
{
    private readonly Document _doc = new();
    private readonly DocumentParamsDto _docParamsDto = new();
    private readonly List<string> _fileList = new();

    private void FilesReady(IMatFileUploadEntry[] files)
    {
        foreach (var file in files)
        {
            _doc.File = file;
            _fileList.Add($"Name: {file.Name} - Size: {file.Size}");
        }
    }

    private void AddValues()
    {
        var oldValue = new DocumentValue()
        {
            Label = $"Old {_docParamsDto.Label}",
            HtmlId = Guid.NewGuid().ToString(),
            IsOldValue = true,
            Text = "",
            HelperText = "This is the old value",
            Type = InputType.TextField
        };
        var newValue = new DocumentValue()
        {
            Label = $"New {_docParamsDto.Label}",
            HtmlId = Guid.NewGuid().ToString(),
            IsOldValue = false,
            Text = "",
            HelperText = "This is will be the new value",
            Type = InputType.TextField
        };

        _doc.DocumentValues.Add(oldValue, newValue);
    }

    private async Task HandleSubmit()
    {
        var wordStream = await DocumentService.Replace(_doc);
        using var streamRef = new DotNetStreamReference(stream: wordStream);
        
        await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "teste.docx", wordStream.ConvertToBase64());

    }

    private void InvokeChangeState()
    {
        InvokeAsync(StateHasChanged);
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

}